#!/usr/bin/env bash

# TODO: exit status is inconsistent. Set exit status to fail by saying:
#             echo 1 > $status_file

# Talk to NS if you want pointers on how to configure your Mac or
# CentOS host to run this test script.

[[ `pwd` == */lib/meteor ]] || cd lib/meteor

# export variables or else GNU parallel cannot see them!

export status_file=/tmp/JS_CodeSniffer-autotest-status.lock
export git_info_file=/tmp/JS_CodeSniffer-git-info.lock
export lockfile=/tmp/JS_CodeSniffer-autotest.lock
export files_for_search=/tmp/JS_CodeSniffer-autotest-files

export tidy_conf="
--doctype omit
--tidy-mark no
--show-warnings yes
--gnu-emacs yes
--new-blocklevel-tags template
--show-warnings yes
--show-info no
--output-file /tmp/tidy.html
"
tidy_ignore_regex='(DOCTYPE|title|not approved|proprietary attribute|implicit <body>|trimming empty|missing <li>)|"tabindex" has invalid value "-1"|missing </template> before <li>|inserting implicit <ul>|missing </ul> before </template>|missing quote mark for attribute value'

export csslint_conf="
--quiet
--ignore=ids,qualified-headings,box-model
"

set -e

echo 0 > $status_file

find . -type f -not \( -path *.meteor* -o -path *vendor* \)  > $files_for_search

export js_files=`egrep '.js$' $files_for_search`
export html_files=`egrep '.html$' $files_for_search`
export css_files=`egrep '.css$' $files_for_search`

set +e

jshint_runner () {
    jshint $js_files
}

jsLint_runner () {

    # TODO remove old predefs

    jslint --predef Meteor \
        --predef Template \
        --predef Session \
        --predef 'jQuery' \
        --predef '$' \
        --predef '_' \
        --predef moment \
        --predef IS_DEV \
        --predef IS_PRODUCTION \
        --plusplus \
        --devel \
        --vars \
        --nomen \
        --sloppy \
        --white \
        --terse \
        --browser $js_files | \
        egrep -v 'is OK.$' | egrep -v '^ *$'

}


html5tidy_runner () {

    tidy $tidy_conf $html_files 2>&1 | \
        egrep -v "$tidy_ignore_regex" | \
        egrep -v '^$' | \
        egrep '^./' >&2

}

# sudo npm install -g csslint
csslint_runner () {
    csslint $csslint_conf $css_files
}

whitespace_sniffer () {
    egrep ' +$' $js_files $html_files $css_files && \
        echo 'Please fix EOL whitespace in the files mentioned above.'
}

# Closure checks for undeclared variables! Very important. But it's
# slow so we use GNU Parallel. Be careful how many jobs you let
# Parallel run at once! Running closure.jar with -j0 locked up a dual
# core Mac Mini so bad I had to power cycle it :)

google_closure_runner () {

        # Meteor dislikes something about running closure.jar inside
        # parallel via static_analyzers.js. Runs fine from the shell,
        # but when run inside meteor, wind up with lots of stuck
        # threads and a 120s runtime instead of 5s runtime :(

        # echo $js_files | tr ' ' '\n' | \
        #     parallel -j1 java -jar /opt/closure/compiler.jar \

    java -jar /opt/closure/compiler.jar $js_files \
        --warning_level DEFAULT \
        --jscomp_off missingProperties \
        --compilation_level ADVANCED_OPTIMIZATIONS \
        --externs ../../tests/conf/externs.js | \
        > /dev/null

}

# doubled template name will TAKE DOWN THE SITE when deployed to --
# meteor.com, apparently :(((
#
# A JS error is displayed in the console when this happens, but
# otherwise the result is a completely blank page.
#
# TODO use an HTML parser not a regex

list_duplicated_templates () {
    egrep '<template [^>]*name=' $html_files | \
        perl -lwne 'm{name="(.*)"} and print $1' | \
        sort | \
        uniq -c | \
        egrep -v '^ +1'
}

duplicated_template_sniffer () {
    dupes=`list_duplicated_templates` && \
        (echo FAILURE: Duplicate templates detected! && \
        echo && \
        echo $dupes && \
        echo &&\
        exit 1)
}

inline_styles_sniffer () {
    reasonable_upper_bound=37

    inline_styles=$(
        echo $html_files | \
            xargs egrep '<[^<]+(style|onclick)=[^>]+>' | \
            wc -l | \
            tr -d ' '
    )

    if [ $inline_styles -gt $reasonable_upper_bound ]
    then
        echo 1 > $status_file
        echo WARNING: $inline_styles styles or event handlers declared inline >&2
    fi

}

files_count_sniffer () {

    files_of_code=$(echo "$html_files $css_files $js_files" | \
        wc -l | \
        tr -d ' ')

    echo $files_of_code files >&2
}



lines_of_code_sniffer () {

    lines_of_code=$(echo "$html_files $css_files $js_files" | \
        xargs wc -l | \
        tr -d ' total' | \
        tail -n1)

    echo $lines_of_code lines of code >&2

}

unique_token_sniffer () {

    unique_token_count=$(export LC_ALL='C'; \
        echo $html_files $css_files $js_files | \
        xargs perl -lwpe 's{(\W)}{ $1 }g' | \
        perl -lwpe 's{\s+}{\n}g' | \
        sort | \
        uniq | \
        wc -l)

    echo $unique_token_count unique tokens >&2

}

console_call_count_sniffer () {

    reasonable_upper_bound=75

    console_call_count=$(echo $js_files | \
        xargs egrep '\bconsole\.' | \
        wc -l | \
        tr -d ' ')


    if [ $console_call_count -gt $reasonable_upper_bound ]
    then
        echo 1 > $status_file

        echo WARNING: $console_call_count calls to window.console >&2
    fi

}

variable_declaration_in_controller_sniffer () {

    reasonable_upper_bound=80

    declared_in_controller_count=$(echo "$js_files" | \
        grep /controllers/ | \
        xargs egrep '(^ +(var|function))' | \
        wc -l | \
        tr -d ' '
    )

    if [ $declared_in_controller_count -gt $reasonable_upper_bound ]
    then
        echo 1 > $status_file

        echo WARNING: $declared_in_controller_count variable declarations in controllers. >&2
    fi

}


todos_sniffer () {

    reasonable_upper_bound=80

    todos_count=$(echo "$html_files $css_files $js_files" | \
        xargs egrep -i '\btodo\b' | \
        wc -l | \
        tr -d ' ')

    if [ $todos_count -gt $reasonable_upper_bound ]
    then
        echo 1 > $status_file

        echo WARNING: $todos_count TODOs >&2
    fi
}

callgraph_generator () {

    test -f /tmp/JS_CodeSniffer-callgraph-generator.lock && exit 1

    touch /tmp/JS_CodeSniffer-callgraph-generator.lock

    test -d .callgraphs || mkdir .callgraphs

    test -f .callgraphs/*_callgraph.png && rm .callgraphs/*_callgraph.png

    echo $js_files | tr ' ' '\n' | xargs -I @ bin/js_callgraph_neato @ && \
        mv *_callgraph.png .callgraphs/

    rm /tmp/JS_CodeSniffer-callgraph-generator.lock

}

yardstick_runner () {
    reasonable_upper_bound_for_CCN=40

    result=$(echo $js_files | \
        xargs yardstick | \
        grep -v @ | egrep -v '^ ' | \
        perl -lnwe 's{^(\S+)(\s+)(\d+).*}{$3$2$1} and print' | \
        sort -rn | \
        head -n1 | \
        xargs -I @ echo @: high cyclomatic complexity.)

    count=`echo $result | cut -d ' ' -f1`

    if [ $count -gt $reasonable_upper_bound_for_CCN ]
    then
        echo 1 > $status_file

        echo WARNING: $result >&2
    fi
}


git_info () {
    current_branch=`git branch | tee $git_info_file | egrep '^\*' | cut -c3-`
    echo $current_branch `git describe`
    echo `cat $git_info_file | wc -l` local git branches
}


static_analysis_runner () {

    buildstamp=`date "+%Z %Y-%m-%d %H:%M:%S"`

    buildUID=`pwgen -10A`

    test -f $lockfile && \
        ruby -rubygems -e "require 'time-lord'; puts Time.parse(ARGV.join(' ')).ago_in_words" `cat $lockfile` | \
        perl -lpwe 's{$_}{Previous build was $_.}'

    echo \"$buildUID\" build started at: $buildstamp

    echo


    export -f google_closure_runner
    export -f whitespace_sniffer
    export -f csslint_runner
    export -f html5tidy_runner
    export -f jshint_runner
    export -f jsLint_runner
    export -f list_duplicated_templates
    export -f duplicated_template_sniffer
    export -f todos_sniffer
    export -f variable_declaration_in_controller_sniffer
    export -f console_call_count_sniffer
    export -f unique_token_sniffer
    export -f lines_of_code_sniffer
    export -f files_count_sniffer
    export -f inline_styles_sniffer
    export -f yardstick_runner
    export -f git_info

    parallel -j0 ::: \
        google_closure_runner \
        whitespace_sniffer \
        csslint_runner \
        html5tidy_runner \
        jshint_runner \
        jsLint_runner \
        todos_sniffer \
        variable_declaration_in_controller_sniffer \
        console_call_count_sniffer \
        unique_token_sniffer \
        lines_of_code_sniffer \
        files_count_sniffer \
        inline_styles_sniffer \
        yardstick_runner \
        git_info

    echo
    echo $buildstamp > $lockfile && \
        test -f $lockfile && \
        ruby -rubygems -e "require 'time-lord'; puts Time.parse(ARGV.join(' ')).ago_in_words" `cat $lockfile` | \
        perl -lpe 's{ ago$}{}' | perl -lpe 's{just now}{0 seconds}' | \
        perl -lpwe 's{$_}{$_ elapsed.}'
    echo \"$buildUID\" build complete at  `date "+%Z %Y-%m-%d %H:%M:%S"`

}

static_analysis_runner

# always return a good exit status for now, because the various
# _runner functions do not return significant exit statuses as
# yet

exit `cat $status_file`
